import tkinter as tk
from tkinter import messagebox, scrolledtext
from scapy.all import sniff, wrpcap
import logging
import threading

logging.basicConfig(filename='network_sniffer.log', level=logging.INFO, format='%(asctime)s - %(message)s')


class NetworkSnifferApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Network Sniffer")

        self.interface_label = tk.Label(master, text="Network Interface:(ex:-Wi-Fi,Eth0)")
        self.interface_label.pack(pady=5)

        self.interface_entry = tk.Entry(master)
        self.interface_entry.pack(pady=5)

        self.count_label = tk.Label(master, text="Number of Packets (0 for unlimited):")
        self.count_label.pack(pady=5)

        self.count_entry = tk.Entry(master)
        self.count_entry.pack(pady=5)

        self.start_button = tk.Button(master, text="Start Sniffer", command=self.start_sniffer)
        self.start_button.pack(pady=5)

        self.stop_button = tk.Button(master, text="Stop Sniffer", command=self.stop_sniffer, state=tk.DISABLED)
        self.stop_button.pack(pady=5)

        self.save_button = tk.Button(master, text="Save Packets", command=self.save_packets, state=tk.DISABLED)
        self.save_button.pack(pady=5)

        self.output_area = scrolledtext.ScrolledText(master, width=60, height=20)
        self.output_area.pack(pady=5)

        self.captured_packets = []
        self.sniffer_thread = None
        self.sniffer_running = False

    def packet_callback(self, packet):
        logging.info(packet.summary())
        self.output_area.insert(tk.END, packet.summary() + "\n")
        self.captured_packets.append(packet)

    def start_sniffer(self):
        interface = self.interface_entry.get()
        count = self.count_entry.get()
        count = int(count) if count.isdigit() else 0

        if not interface:
            messagebox.showerror("Input Error", "Please enter a network interface.")
            return

        self.sniffer_running = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.save_button.config(state=tk.DISABLED)

        self.sniffer_thread = threading.Thread(target=self.run_sniffer, args=(interface, count))
        self.sniffer_thread.start()

    def run_sniffer(self, interface, count):
        sniff(iface=interface, prn=self.packet_callback, count=count, store=0)
        self.sniffer_running = False
        self.stop_button.config(state=tk.DISABLED)
        self.save_button.config(state=tk.NORMAL)

    def stop_sniffer(self):
        if self.sniffer_running:
            self.sniffer_running = False
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            self.save_button.config(state=tk.NORMAL)

    def save_packets(self):
        if not self.captured_packets:
            messagebox.showwarning("No Packets", "No packets captured to save.")
            return

        wrpcap('captured_packets.pcap', self.captured_packets)
        messagebox.showinfo("Success", f"Saved {len(self.captured_packets)} packets to captured_packets.pcap")


if __name__ == "__main__":
    root = tk.Tk()
    app = NetworkSnifferApp(root)
    root.mainloop()
